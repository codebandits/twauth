jobs:

- name: publish ci image
  plan:
  - get: ci-image-source
    trigger: true
  - put: ci-image
    params:
      build: ci-image-source/ci/docker

- name: api
  plan:
  - aggregate:
    - get: ci-image
    - get: api-source
      trigger: true
    - get: api-version
      params: {bump: patch}
  - task: test and build
    image: ci-image
    config:
      inputs:
      - name: api-version
      - name: api-source
      outputs:
      - name: api-build
      platform: linux
      run:
        dir: api-source
        path: sh
        args:
        - -exc
        - |
          VERSION=$(cat ../api-version/number)
          BUILD_DIR=../api-build/api-$VERSION
          ./gradlew -Pversion=$VERSION api:test api:assemble
          mkdir -p $BUILD_DIR
          cp -r api/build/libs/api-$VERSION.jar api/deployment $BUILD_DIR
          echo "path: ../api-$VERSION.jar" | tee -a $BUILD_DIR/deployment/manifest-*.yml
          cd $BUILD_DIR
          tar czf ../api-$VERSION.tgz .
  - put: api-artifact
    params:
      file: ./api-build/api-*.tgz
  - put: api-version
    params: {file: api-version/version}

- name: chat
  plan:
  - aggregate:
    - get: ci-image
    - get: chat-source
      trigger: true
    - get: chat-version
      params: {bump: patch}
  - task: test and build
    image: ci-image
    config:
      inputs:
      - name: chat-version
      - name: chat-source
      outputs:
      - name: chat-build
      platform: linux
      run:
        dir: chat-source
        path: sh
        args:
        - -exc
        - |
          VERSION=$(cat ../chat-version/number)
          BUILD_DIR=../chat-build/chat-$VERSION
          ./gradlew chat:yarn_install chat:yarn_test chat:yarn_run_build
          mkdir -p $BUILD_DIR
          cp -r chat/deployment $BUILD_DIR
          cp -r chat/build $BUILD_DIR/chat-$VERSION
          echo "path: ../chat-$VERSION" | tee -a $BUILD_DIR/deployment/manifest-*.yml
          cd $BUILD_DIR
          tar czf ../chat-$VERSION.tgz .
  - put: chat-artifact
    params:
      file: ./chat-build/chat-*.tgz
  - put: chat-version
    params: {file: chat-version/version}

- name: e2e
  serial: true
  plan:
  - aggregate:
    - get: ci-image
    - get: e2e-source
      trigger: true
    - get: api-artifact
      trigger: true
      passed: [api]
    - get: chat-artifact
      trigger: true
      passed: [chat]
  - aggregate:
    - task: extract api
      image: ci-image
      config:
        inputs:
        - name: api-artifact
        outputs:
        - name: api-artifact-extract
        platform: linux
        run:
          dir: api-artifact
          path: sh
          args:
          - -exc
          - |
            tar xzf api-*.tgz -C ../api-artifact-extract
    - task: extract chat
      image: ci-image
      config:
        inputs:
        - name: chat-artifact
        outputs:
        - name: chat-artifact-extract
        platform: linux
        run:
          dir: chat-artifact
          path: sh
          args:
          - -exc
          - |
            tar xzf chat-*.tgz -C ../chat-artifact-extract
  - aggregate:
    - put: cf-ci
      params:
        manifest: api-artifact-extract/deployment/manifest-ci.yml
    - put: cf-ci
      params:
        manifest: chat-artifact-extract/deployment/manifest-ci.yml

  - task: end to end tests
    image: ci-image
    params:
      API_URL: http://twauth-api-ci.cfapps.io/
      CHAT_URL: http://twauth-chat-ci.cfapps.io/
      TWITTER_USERNAME: ((e2e.twitter_username))
      TWITTER_PASSWORD: ((e2e.twitter_password))
    privileged: true
    config:
      inputs:
      - name: e2e-source
      platform: linux
      run:
        dir: e2e-source
        path: sh
        args:
        - -exc
        - |
          chown -R browsertests:browsertests .
          su browsertests -c 'xvfb-run ./gradlew e2e:test'

resource_types:
- name: semver-latest
  type: docker-image
  source:
    repository: concourse/semver-resource
- name: google-cloud-storage
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: api-version
  type: semver-latest
  source:
    driver: gcs
    bucket: twauth-versions
    key: api-version
    json_key: ((gcr-key))
- name: chat-version
  type: semver-latest
  source:
    driver: gcs
    bucket: twauth-versions
    key: chat-version
    json_key: ((gcr-key))
- name: api-artifact
  type: google-cloud-storage
  source:
    bucket: twauth-artifacts
    json_key: ((gcr-key))
    regexp: api-(.*).tgz
- name: chat-artifact
  type: google-cloud-storage
  source:
    bucket: twauth-artifacts
    json_key: ((gcr-key))
    regexp: chat-(.*).tgz
- name: api-source
  type: git
  source:
    uri: https://github.com/codebandits/twauth.git
    branch: master
    paths:
    - api
- name: chat-source
  type: git
  source:
    uri: https://github.com/codebandits/twauth.git
    branch: master
    paths:
    - chat
- name: e2e-source
  type: git
  source:
    uri: https://github.com/codebandits/twauth.git
    branch: master
    paths:
    - e2e
- name: ci-image-source
  type: git
  source:
    uri: https://github.com/codebandits/twauth.git
    branch: master
    paths:
    - ci/docker
- name: ci-image
  type: docker-image
  source:
    repository: gcr.io/twauth-178923/ci
    username: _json_key
    password: ((gcr-key))
- name: cf-ci
  type: cf
  source:
    api: ((cf.api))
    username: ((cf.username))
    password: ((cf.password))
    organization: ((cf.organization))
    space: ci

groups:
- name: pipeline
  jobs:
  - api
  - chat
  - e2e
- name: ci-image
  jobs:
  - publish ci image
